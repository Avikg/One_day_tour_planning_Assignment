
# Comprehensive Guide to Run and Understand the One-Day Tour Planning Application

## Project Description

The **One-Day Tour Planning Application** is a full-stack solution designed to create personalized, optimized one-day travel itineraries for users. It uses a backend API (FastAPI) to handle data and logic, a frontend UI (Streamlit) for user interaction, and a Neo4j database (optional) for storing user preferences and itineraries.

---

## How the Application Works

1. **User Interaction via Streamlit Frontend**:
   - Users provide their travel preferences, including:
     - **City**: The destination city (e.g., Berlin, New York).
     - **Date**: The date of the trip.
     - **Start and End Times**: The timeframe for the day.
     - **Interests**: Areas of interest (e.g., history, food, shopping).
     - **Budget**: Maximum allowable cost for activities.
     - **Starting Point**: The starting location of the day (e.g., hotel or landmark).

2. **Backend Processing (FastAPI)**:
   - Preferences are sent to the FastAPI backend via API endpoints:
     - `/collect_preferences`: Saves the user preferences.
     - `/generate_itinerary`: Generates a customized itinerary based on the saved preferences.
   - The backend filters activities based on the user's interests, city, and budget.

3. **Output to the User**:
   - The frontend displays the generated itinerary with detailed stops, including:
     - **Stop Name**: The attraction or activity name.
     - **Activity**: Description of the activity.
     - **Start and End Times**: When to visit each stop.
     - **Cost**: Estimated cost of the activity.
     - **Travel Method**: Suggested method to travel between stops (e.g., walk, taxi).

4. **Neo4j Database (Optional)**:
   - Stores user preferences and itineraries for future retrieval and updates.

---

## How to Run the Application

### Prerequisites
- **Python 3.8+**: Ensure Python is installed. You can download it from [python.org](https://www.python.org/downloads/).
- **Libraries**: FastAPI, Streamlit, Uvicorn, Requests, and Neo4j (optional).
- **Neo4j Database** (Optional): Install and set up Neo4j from [neo4j.com](https://neo4j.com/).

---

### Step-by-Step Instructions

#### 1. Clone the Project Repository
- Clone the project folder or ensure you have all project files:
  ```
  app.py                # FastAPI backend
  streamlit_app.py      # Streamlit frontend
  neo4j_agent.py        # (Optional) Neo4j integration
  requirements.txt      # Python dependencies
  ```

#### 2. Set Up the Virtual Environment

1. Create a virtual environment:
   ```bash
   python -m venv venv
   ```

2. Activate the virtual environment:
   ```bash
   .\venv\Scripts\activate    # On Windows
   source venv/bin/activate   # On macOS/Linux
   ```

3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

---

#### 3. Run the Backend Server (FastAPI)

1. Start the FastAPI backend server using Uvicorn:
   ```bash
   python -m uvicorn app:app --reload --host 127.0.0.1 --port 8000
   ```

2. Verify the backend is running:
   - Open [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs) to access the Swagger UI.
   - Test the endpoints:
     - **POST /collect_preferences**: Save user preferences.
     - **POST /generate_itinerary**: Generate the itinerary.

---

#### 4. Run the Frontend (Streamlit)

1. Start the Streamlit frontend:
   ```bash
   streamlit run streamlit_app.py
   ```

2. The Streamlit app will open in your default browser at [http://localhost:8501](http://localhost:8501).

---

#### 5. Interact with the Application

- **Save Preferences**:
  - Fill in your travel details on the Streamlit form and click **Save Preferences**.
  - The preferences are sent to the `/collect_preferences` API endpoint.

- **Generate Itinerary**:
  - Click **Generate Itinerary** to display the day’s plan.
  - Stops, costs, and activities are shown dynamically based on the inputs.

---

#### 6. Neo4j Setup (Optional)

1. Install Neo4j from [neo4j.com](https://neo4j.com/).
2. Start the Neo4j database and configure credentials in `neo4j_agent.py`:
   ```python
   NEO4J_URI = "bolt://localhost:7687"
   NEO4J_USERNAME = "neo4j"
   NEO4J_PASSWORD = "your_password"
   ```

3. Enable Neo4j integration in the backend to save and retrieve preferences.

---

## Code Highlights

### Backend Endpoints (FastAPI)
1. **`/collect_preferences`**:
   - Saves user preferences to memory or Neo4j.
   - Input Example:
     ```json
     {
       "user_id": "user123",
       "city": "Berlin",
       "date": "2024-12-10",
       "start_time": "9:00 AM",
       "end_time": "6:00 PM",
       "interests": ["history", "museums"],
       "budget": 100,
       "starting_point": "Hotel Berlin Central"
     }
     ```

2. **`/generate_itinerary`**:
   - Generates an itinerary based on saved preferences.
   - Input Example:
     ```json
     { "user_id": "user123" }
     ```
   - Output Example:
     ```json
     [
       {
         "stop_name": "Brandenburg Gate",
         "activity": "Visit iconic landmark",
         "cost": 0,
         "travel_time": "15 min",
         "travel_method": "walk"
       },
       {
         "stop_name": "Museum Island",
         "activity": "Explore museums",
         "cost": 12,
         "travel_time": "15 min",
         "travel_method": "taxi"
       }
     ]
     ```

---

## Testing the Application

1. **Unit Testing**:
   - Test backend endpoints individually using tools like **Postman** or the Swagger UI.
   - Example Test Cases:
     - Save preferences and ensure they’re stored correctly.
     - Generate itineraries for supported and unsupported cities.

2. **End-to-End Testing**:
   - Use the Streamlit interface to simulate real-world user interaction.
   - Confirm the itinerary is displayed correctly based on inputs.

3. **Error Handling**:
   - Test edge cases, such as unsupported cities, low budgets, or missing preferences.

---

## Future Enhancements

1. **Dynamic City Data**:
   - Fetch city attractions dynamically from an API or database.
2. **User Authentication**:
   - Add authentication to associate itineraries with user accounts.
3. **Enhanced Filtering**:
   - Allow users to filter stops by duration, activity type, or cost.
4. **Mobile App**:
   - Create a mobile app for on-the-go itinerary planning.

---

## Summary

- **Purpose**: Simplify one-day trip planning with personalized itineraries.
- **Tech Stack**: FastAPI, Streamlit, Neo4j (optional), Python.
- **Usage**: Collect preferences, generate itineraries, and interact with a user-friendly frontend.
